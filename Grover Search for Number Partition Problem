{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"authorship_tag":"ABX9TyMl+lMWly+ayyJE9L+6QL18"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","source":["import numpy as np\n","import matplotlib.pyplot as plt\n","\n","\n","PauliX = [[0, 1], [1, 0]]\n","PauliY = [[0, -1j], [-1j, 0]]\n","PauliZ = [[1, 0], [0, -1]]\n","Identity = [[1, 0], [0, 1]]"],"metadata":{"id":"ZeadzGV1nCtX","executionInfo":{"status":"ok","timestamp":1705043721768,"user_tz":360,"elapsed":111,"user":{"displayName":"Adhithya Vijayakumar","userId":"07234256119541558141"}}},"execution_count":3,"outputs":[]},{"cell_type":"code","source":["def TensorMultiplication(a, b):\n","  matrix = [[] for x in range(len(a)* len(b))]\n","\n","  for i in range(len(a)):\n","    for x in a[i]:\n","      for n in range(len(b)):\n","        for y in b[n]:\n","            matrix[2*i+n].append(x*y)\n","  return matrix"],"metadata":{"id":"WJh5gWQwnJDk","executionInfo":{"status":"ok","timestamp":1705043722553,"user_tz":360,"elapsed":137,"user":{"displayName":"Adhithya Vijayakumar","userId":"07234256119541558141"}}},"execution_count":4,"outputs":[]},{"cell_type":"code","source":["Zmatrix = 0\n","weights = [4,4,4,4]\n","\n","for n in range(len(weights)):\n","  for i in range(len(weights)):\n","    if(i == 0):\n","      if n == 0:\n","        XX = weights[i]*np.array(PauliZ)\n","      else:\n","        XX = Identity\n","    else:\n","      if(i == n):\n","        XX = TensorMultiplication(XX, weights[i]*np.array(PauliZ))\n","      else:\n","        XX = TensorMultiplication(XX, Identity)\n","  if(Zmatrix == 0):\n","    Zmatrix = XX\n","  else:\n","    temp = [[] for i in range(len(XX))]\n","    for i in range(len(XX)):\n","      for n in range(len(XX[i])):\n","        temp[i].append(XX[i][n]+Zmatrix[i][n])\n","    Zmatrix = temp"],"metadata":{"id":"GugVcHgUnKc-","executionInfo":{"status":"ok","timestamp":1705044058815,"user_tz":360,"elapsed":126,"user":{"displayName":"Adhithya Vijayakumar","userId":"07234256119541558141"}}},"execution_count":13,"outputs":[]},{"cell_type":"code","source":["plt.imshow(Zmatrix)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":448},"id":"IGb8RcZhsm5u","executionInfo":{"status":"ok","timestamp":1705044060447,"user_tz":360,"elapsed":1183,"user":{"displayName":"Adhithya Vijayakumar","userId":"07234256119541558141"}},"outputId":"829e2ed3-c3a0-486d-c317-99692dc3936b"},"execution_count":14,"outputs":[{"output_type":"execute_result","data":{"text/plain":["<matplotlib.image.AxesImage at 0x7d18f80f1150>"]},"metadata":{},"execution_count":14},{"output_type":"display_data","data":{"text/plain":["<Figure size 640x480 with 1 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"markdown","source":["Next step would be to implement a way to combine the coefficient for the same eigenstates."],"metadata":{"id":"lke5B_AR4ffa"}},{"cell_type":"code","execution_count":17,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"xQYgsTH5tUjr","executionInfo":{"status":"ok","timestamp":1705044719469,"user_tz":360,"elapsed":142,"user":{"displayName":"Adhithya Vijayakumar","userId":"07234256119541558141"}},"outputId":"cbf51e6f-029e-4ca4-95d0-beff34fe9076"},"outputs":[{"output_type":"stream","name":"stdout","text":["[16, 8, 8, 0, 8, 0, 0, -8, 8, 0, 0, -8, 0, -8, -8, -16]\n","[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]\n","16\n","[-0.12500000158691404, -0.1250000001220703, -0.1250000001220703, 0.3749999979248047, -0.1250000001220703, 0.3749999979248047, 0.3749999979248047, -0.1250000001220703, -0.1250000001220703, 0.3749999979248047, 0.3749999979248047, -0.1250000001220703, 0.3749999979248047, -0.1250000001220703, -0.1250000001220703, -0.12500000158691404]\n","[-0.3124999965820313, -0.31249999877929696, -0.31249999877929696, -0.06250000000000006, -0.31249999877929696, -0.06250000000000006, -0.06250000000000006, -0.31249999877929696, -0.31249999877929696, -0.06250000000000006, -0.06250000000000006, -0.31249999877929696, -0.06250000000000006, -0.31249999877929696, -0.31249999877929696, -0.3124999965820313]\n","[-0.031249999359130864, -0.031249998992919914, -0.031249998992919914, -0.4062499953308107, -0.031249998992919914, -0.4062499953308107, -0.4062499953308107, -0.031249998992919914, -0.031249998992919914, -0.4062499953308107, -0.4062499953308107, -0.031249998992919914, -0.4062499953308107, -0.031249998992919914, -0.031249998992919914, -0.031249999359130864]\n","[0.29687499722290056, 0.2968749966735842, 0.2968749966735842, -0.14062499740600581, 0.2968749966735842, -0.14062499740600581, -0.14062499740600581, 0.2968749966735842, 0.2968749966735842, -0.14062499740600581, -0.14062499740600581, 0.2968749966735842, -0.14062499740600581, 0.2968749966735842, 0.2968749966735842, 0.29687499722290056]\n","[0.17968749492645264, 0.17968749721527094, 0.17968749721527094, 0.33593749416351343, 0.17968749721527094, 0.33593749416351343, 0.33593749416351343, 0.17968749721527094, 0.17968749721527094, 0.33593749416351343, 0.33593749416351343, 0.17968749721527094, 0.33593749416351343, 0.17968749721527094, 0.17968749721527094, 0.17968749492645264]\n","[-0.2070312457427981, -0.20703124697875996, -0.20703124697875996, 0.30859374299621584, -0.20703124697875996, 0.30859374299621584, 0.30859374299621584, -0.20703124697875996, -0.20703124697875996, 0.30859374299621584, 0.30859374299621584, -0.20703124697875996, 0.30859374299621584, -0.20703124697875996, -0.20703124697875996, -0.2070312457427981]\n","[-0.2832031186046601, -0.28320311858177194, -0.28320311858177194, -0.18164062094688443, -0.28320311858177194, -0.18164062094688443, -0.18164062094688443, -0.28320311858177194, -0.28320311858177194, -0.18164062094688443, -0.18164062094688443, -0.28320311858177194, -0.18164062094688443, -0.28320311858177194, -0.28320311858177194, -0.2832031186046601]\n","[0.06542968787956255, 0.06542968619728112, 0.06542968619728112, -0.39941405111885087, 0.06542968619728112, -0.39941405111885087, -0.39941405111885087, 0.06542968619728112, 0.06542968619728112, -0.39941405111885087, -0.39941405111885087, 0.06542968619728112, -0.39941405111885087, 0.06542968619728112, 0.06542968619728112, 0.06542968787956255]\n","[0.3159179582114223, 0.3159179602770808, 0.3159179602770808, -0.018066405155658383, 0.3159179602770808, -0.018066405155658383, -0.018066405155658383, 0.3159179602770808, 0.3159179602770808, -0.018066405155658383, -0.018066405155658383, 0.3159179602770808, -0.018066405155658383, 0.3159179602770808, 0.3159179602770808, 0.3159179582114223]\n"]}],"source":["import numpy as np\n","dup = np.diag(Zmatrix).tolist()\n","g = .001\n","print(dup)\n","\n","a = []\n","l = []\n","location = []\n","count = 0\n","while len(dup) > 0:\n","  l.append(dup[0])\n","  a.append(1)\n","  dup.pop(0)\n","\n","print(a)\n","s = sum(a)\n","print(s)\n","for i in range(len(a)):\n","  a[i] = np.sqrt((1/s)*a[i])\n","\n","#This creates a wavefunction that exists in the form: psi = a0|l0> + a1|l1> + ....\n","\n","for i in range(round(np.pi*np.sqrt(len(l)/2))):\n","  #rotation around X axis\n","  for n in range(len(l)):\n","    a[n] = np.exp(1j*(2*np.arctan(2*l[n]/g)+np.pi)).real*a[n]\n","  #rotation around avg\n","  mu = sum(a)/len(l)\n","  for n in range(len(l)):\n","    a[n] = (2*mu - a[n])\n","\n","  print(a)\n","  b = []\n","  for i in range(len(a)):\n","    b.append(a[i]**2)\n"]},{"cell_type":"code","source":[],"metadata":{"id":"je2II_7vhtYQ"},"execution_count":null,"outputs":[]}]}